#!/usr/bin/env python3
"""
Test dashboard template for AI authenticity indicators
"""

import sys
import os
import re
from datetime import datetime

# Add the parent directory to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_dashboard_ai_indicators():
    """Test that dashboard template shows proper AI authenticity indicators"""
    
    print("üñ•Ô∏è  Dashboard AI Authenticity Indicators Test")
    print("=" * 50)
    
    dashboard_path = os.path.join(os.path.dirname(__file__), '..', 'app', 'templates', 'dashboard.html')
    
    try:
        with open(dashboard_path, 'r', encoding='utf-8') as f:
            template_content = f.read()
    except FileNotFoundError:
        print(f"‚ùå FAIL: Dashboard template not found at {dashboard_path}")
        return False
    
    print("‚úÖ Dashboard template loaded")
    
    # Test 1: Check for AI advice section
    print("\n1. Checking for AI advice section...")
    ai_section_patterns = [
        r'AI-Powered.*Health.*Insights',
        r'ai_advice',
        r'gemini_ai'
    ]
    
    found_ai_section = False
    for pattern in ai_section_patterns:
        if re.search(pattern, template_content, re.IGNORECASE):
            found_ai_section = True
            break
    
    if not found_ai_section:
        print("‚ùå FAIL: No AI advice section found in template")
        return False
    print("‚úÖ AI advice section found")
    
    # Test 2: Check for source attribution
    print("\n2. Checking for source attribution...")
    source_patterns = [
        r'Generated by.*AI Assistant',
        r'ai_advice\.source',
        r'gemini_ai'
    ]
    
    found_source = False
    for pattern in source_patterns:
        if re.search(pattern, template_content, re.IGNORECASE):
            found_source = True
            break
    
    if not found_source:
        print("‚ùå FAIL: No source attribution found")
        return False
    print("‚úÖ Source attribution found")
    
    # Test 3: Check for timestamp display
    print("\n3. Checking for timestamp display...")
    timestamp_patterns = [
        r'generated_at',
        r'timestamp',
        r'at.*\{\{.*\}\}'
    ]
    
    found_timestamp = False
    for pattern in timestamp_patterns:
        if re.search(pattern, template_content, re.IGNORECASE):
            found_timestamp = True
            break
    
    if not found_timestamp:
        print("‚ö†Ô∏è  WARNING: No timestamp display found")
    else:
        print("‚úÖ Timestamp display found")
    
    # Test 4: Check for medical disclaimer
    print("\n4. Checking for medical disclaimer...")
    disclaimer_patterns = [
        r'not.*substitute.*professional.*medical',
        r'informational purposes',
        r'consult.*doctor|physician'
    ]
    
    found_disclaimer = False
    for pattern in disclaimer_patterns:
        if re.search(pattern, template_content, re.IGNORECASE):
            found_disclaimer = True
            break
    
    if not found_disclaimer:
        print("‚ö†Ô∏è  WARNING: No medical disclaimer found")
    else:
        print("‚úÖ Medical disclaimer found")
    
    # Test 5: Check for AI advice structure
    print("\n5. Checking for AI advice structure...")
    structure_elements = [
        'insights',
        'recommendations',
        'quick_wins',
        'concerns',
        'motivation'
    ]
    
    found_elements = []
    for element in structure_elements:
        if element in template_content.lower():
            found_elements.append(element)
    
    if len(found_elements) < 3:
        print(f"‚ùå FAIL: Only found {len(found_elements)} AI advice elements: {found_elements}")
        return False
    print(f"‚úÖ Found {len(found_elements)} AI advice elements: {found_elements}")
    
    # Test 6: Check for conditional AI display
    print("\n6. Checking for conditional AI display...")
    conditional_patterns = [
        r'\{%\s*if.*ai_advice',
        r'ai_advice\s*and',
        r'if.*ai_advice'
    ]
    
    found_conditional = False
    for pattern in conditional_patterns:
        if re.search(pattern, template_content, re.IGNORECASE):
            found_conditional = True
            break
    
    if not found_conditional:
        print("‚ö†Ô∏è  WARNING: No conditional AI display logic found")
    else:
        print("‚úÖ Conditional AI display logic found")
    
    # Test 7: Check for error handling
    print("\n7. Checking for error handling...")
    error_patterns = [
        r'else.*no.*advice',
        r'not.*available',
        r'error.*generating'
    ]
    
    found_error_handling = False
    for pattern in error_patterns:
        if re.search(pattern, template_content, re.IGNORECASE):
            found_error_handling = True
            break
    
    if not found_error_handling:
        print("‚ö†Ô∏è  WARNING: No error handling for AI advice found")
    else:
        print("‚úÖ Error handling found")
    
    print("\n" + "=" * 50)
    print("üéâ DASHBOARD TEMPLATE VERIFICATION COMPLETE!")
    print("‚úÖ Template contains proper AI authenticity indicators")
    
    return True


def extract_ai_sections_from_template():
    """Extract and display AI-related sections from the template"""
    
    print("\nüìã AI-Related Template Sections:")
    print("-" * 40)
    
    dashboard_path = os.path.join(os.path.dirname(__file__), '..', 'app', 'templates', 'dashboard.html')
    
    try:
        with open(dashboard_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print("‚ùå Template file not found")
        return
    
    in_ai_section = False
    ai_lines = []
    
    for i, line in enumerate(lines, 1):
        line_lower = line.lower()
        
        # Start capturing if we find AI-related keywords
        if any(keyword in line_lower for keyword in ['ai_advice', 'ai-powered', 'gemini']):
            in_ai_section = True
        
        if in_ai_section:
            ai_lines.append(f"{i:3d}: {line.rstrip()}")
            
            # Stop capturing after finding end of section
            if '</div>' in line and len(ai_lines) > 10:
                # Look ahead to see if this might be the end
                if i < len(lines) - 5:
                    next_lines = ''.join(lines[i:i+3]).lower()
                    if 'quick actions' in next_lines or 'calendar' in next_lines:
                        break
    
    if ai_lines:
        print("Key AI advice template sections:")
        for line in ai_lines[:30]:  # Show first 30 lines
            print(line)
        if len(ai_lines) > 30:
            print(f"... and {len(ai_lines) - 30} more lines")
    else:
        print("No AI-related sections found in template")


if __name__ == '__main__':
    try:
        success = test_dashboard_ai_indicators()
        
        if success:
            extract_ai_sections_from_template()
        
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå CRITICAL ERROR: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
